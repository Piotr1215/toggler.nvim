*toggler.txt*            For NVIM v0.8.0            Last change: 2024 April 14

==============================================================================
Table of Contents                                  *toggler-table-of-contents*

1. Toggler.nvim                                         |toggler-toggler.nvim|
  - Installation                           |toggler-toggler.nvim-installation|
  - Usage                                         |toggler-toggler.nvim-usage|
  - Configuration                         |toggler-toggler.nvim-configuration|
  - Development                             |toggler-toggler.nvim-development|
  - Test                                           |toggler-toggler.nvim-test|
  - CI                                               |toggler-toggler.nvim-ci|

==============================================================================
1. Toggler.nvim                                         *toggler-toggler.nvim*

This plugin provides a flexible way to dynamically toggle commands in Neovim,
For example, on markdown files we might want to have a linter running on
`BufWritePost` such as `vale`, but running it every time might be too much.
`Toggler.nvim` provides an easy configurable way to register commands that can
be toggled on/off with a key binding.


INSTALLATION                               *toggler-toggler.nvim-installation*


USING VIM-PLUG ~

>vim
    Plug 'Piotr1215/toggler.nvim'
<


USING PACKER.NVIM ~

>lua
    use 'Piotr1215/toggler.nvim'
<


USAGE                                             *toggler-toggler.nvim-usage*

To toggle a command, configure your `init.lua` to set up the specific commands
you want to toggle along with their associated keybindings and optional events,
when the commands should be triggered. Here’s how to set it up:


  The plugin does not create commands, they must be available before toggling.

BASIC CONFIGURATION ~

>lua
    require('toggler').setup({
        {
            name = "Vale",
            cmd = "Vale",
            key = "<leader>vl",
            pattern = "*.md",
            event = "BufWritePost"  -- This is optional; default is 'BufWritePost'
        },
        {
            name = "ESLint",
            cmd = "Eslint --fix",
            key = "<leader>el",
            pattern = "*.js",
            event = "TextChanged,TextChangedI"  -- Trigger on text change
        }
    })
<

This configuration will:

- Toggle Vale on Markdown files with `<leader>vl` on buffer write post.
- Toggle ESLint on JavaScript files with `<leader>el` on text changes.


COMMANDS ~

To manually toggle a command without a keybinding, use:

>vim
    :ToggleCommand name Vale cmd "Vale" pattern "*.md"
<


DEPENDENCIES ~

Neovim 0.5 or higher is required due to the use of advanced Lua features.


CONFIGURATION                             *toggler-toggler.nvim-configuration*

The plugin is highly configurable. Below is an example to customize the
toggler:

>lua
    require('toggler').setup({
        {
            name = "MyLinter",
            cmd = "mylinter --fix",
            key = "<leader>ml",
            pattern = "*.py",
            event = "BufEnter"  -- Trigger on entering the buffer
        }
    })
<


  The plugin does not come with any default commands or configuration, you must
  pass commands to toggle.

DEVELOPMENT                                 *toggler-toggler.nvim-development*

To load the plugin from a local environment for development, add this to your
`init.lua`:

>lua
    vim.opt.runtimepath:prepend("/path/to/your/toggler.nvim")
<


TEST                                               *toggler-toggler.nvim-test*

Tests can be run using the `vusted` framework:

>shell
    vusted test
<


CI                                                   *toggler-toggler.nvim-ci*

Continuous Integration setup includes generating Neovim help docs automatically
from the plugin’s README.md file. This is done using the `vimdoc` tool. Ci
also runs tests.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
